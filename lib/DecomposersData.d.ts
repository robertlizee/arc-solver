import { Color } from "./Color";
import { Transform } from "./Transform";
export interface Decomposer {
    name: string;
    decomposer?: Decomposer;
    decomposer2?: Decomposer;
    decomposers?: Decomposer[];
    transform?: Transform;
    background_color?: Color;
    abstraction_name?: string;
    fixed_size?: boolean;
    default_grid_color?: Color;
    sx?: number;
    sy?: number;
    nx?: number;
    ny?: number;
    failed?: boolean;
}
export declare function image_window(decomposer: Decomposer): Decomposer;
export declare const basic_grid: Decomposer;
export declare function object_list(decomposer: Decomposer): Decomposer;
export declare function object_list2(decomposer: Decomposer): Decomposer;
export declare function block_list(decomposer: Decomposer): Decomposer;
export declare function scaled(decomposer: Decomposer): Decomposer;
export declare function tile(decomposer: Decomposer): Decomposer;
export declare function tile_x(decomposer: Decomposer): Decomposer;
export declare function tile_y(decomposer: Decomposer): Decomposer;
export declare function transform(transform: Transform, decomposer: Decomposer): Decomposer;
export declare const semantic_box: Decomposer;
export declare function trim_object(decomposer: Decomposer): Decomposer;
export declare function trim_object_center(decomposer: Decomposer): Decomposer;
export declare function monochrome(decomposer: Decomposer): Decomposer;
export declare const solid_color: Decomposer;
export declare function background(background_color: Color | undefined, decomposer: Decomposer): Decomposer;
export declare function color_decomposition(decomposer: Decomposer): Decomposer;
export declare function monochrome_object_list(decomposer: Decomposer): Decomposer;
export declare function monochrome_object_list_abstraction(abstraction_name: string, decomposers: Decomposer[]): Decomposer;
export declare function monochrome_decomposition_abstraction(abstraction_name: string, decomposers: Decomposer[]): Decomposer;
export declare function simple_abstraction(abstraction_name: string, decomposer: Decomposer): Decomposer;
export declare function monochrome_object_list2(decomposer: Decomposer): Decomposer;
export declare function horizontal_decomposition(decomposer: Decomposer, fixed_size?: boolean): Decomposer;
export declare function complement(decomposer: Decomposer): Decomposer;
export declare function find_master_grid(decomposer: Decomposer, default_grid_color?: Color, fixed_size?: boolean): Decomposer;
export declare function master_grid(sx: number, sy: number, decomposer: Decomposer): Decomposer;
export declare function master_grid2(nx: number, ny: number, decomposer: Decomposer): Decomposer;
export declare const pixel_grid: Decomposer;
export declare function add_info(decomposer: Decomposer, decomposer2: Decomposer): Decomposer;
export declare function centered(decomposer: Decomposer): Decomposer;
export declare function alternatives(decomposers: Decomposer[]): Decomposer;
export declare function normalize_decomposer(decomposer: Decomposer): Decomposer;
export declare function decomposer_to_key(decomposer?: Decomposer | Decomposer[]): string;
export declare const root_decomposers: Set<string>;
export declare function decomposer_clone(decomposer: Decomposer): Decomposer;
export declare function decomposer_remove_failed_alternatives(decomposer: Decomposer): Decomposer;
export declare function decomposer_prefix(decomposer: Decomposer): Decomposer | undefined;
export declare function decomposer_root(decomposer: Decomposer): Decomposer | undefined;
export declare function decomposer_suffix(decomposer: Decomposer): Decomposer | Decomposer[] | undefined;
